MOV $3 $0		//i = 0
MOV $4 $0		//j = 0
ADDI $1 #2 	
RSH $1 #4		//$1 = 32 :store val	//should I store this in memory?
ADDI $6 #4 	
RSH $6 #4		//$6 = 64 :store location
STORE $6 #0 	//store 32 ($1) in mem[64] ($6)
ADDI $2 #4   //$2 will contain PC of exit label   
ADDI $2 #1
RSH $2 #4   //
ADDI $2 #1  //store 21 (PC of EXIT label)       
//loop:				
EQ $3 $1			//If i = 32, execute next line (jump out of loop), else continue loop
JAL $6 $2		//$6 = 10  (whatever current PC is)
MOV $1 $7		//MOV 32 to $7 (for pattern_bits[32])
LOAD $3 #0		//load mem[i] (curr_byte)
LOAD $7 #0 		//load pattern_bits[32]
//ADD 			//curr_state
// post-loop condition 
ADDI $3 #1 		//i = i + 1
ADDI $6 #4 	
RSH $6 #4		//$6 = 64
LOAD $6 #0		//load mem[64] (value 32)
//exit:		//end of loop
