 //MOV $3 $0	 //j = 0
 BEGIN:


 /*Calculate j+30*/
 AND $2 $0 //$2 = 0   or x = 0
 ADDI $2 #4 //$2 += 4   or x = 4 
 LSH $2 #4 //$2 *= 4   or x = 32
 SUBI $2 #2 //$2 -= 2   or x = 30
 ADD $2 $3 //$2 = j + 30
 
 /*Initialize upper_bits, lower_bits*/
 LOAD $2 #1 //$1 = data_mem[j+31] 
 MOV $5 $1 //$5 = $1   or $5 = upper_bits
 LOAD $2 #0 //$1 = data_mem[j+30] 
 MOV $7 $1 //$7 = lower_bits
 
 /*Calculate p flags*/
 /*p8*/
 MOV $0 $6 //$6 = ‘b00000000
 SUBI $6 #2 //$6 = ‘b11111110
 RXOR $1 $5 //$1 = ^upper_bits or !p8err
 ADD $6 $1 //$6 = {1111111, !p8err}
 LSH $6 #1 //$6 << 1
 /*p4*/
 ADDI $4 #3 //$4 = ‘b11
 LSH $4 #2 //$4 = ‘b1100
 ADDI $4 #3 //$4 = ‘b1111
 LSH $4 #4 //$4 = ‘b11110000
 MOV $1 $4 //$1 = ‘b11110000 ///Starting here could maybe be simplified with something similar to a jump-link deal (maybe can use $2)
 AND $1 $5 //$1 = ‘b11110000 & upper_bits or upper_bits[b11:b8]
 AND $4 $7 //$4 = ‘b11110000 & lower_bits or lower_bits[b4:p4]
 BXOR $4 $1 //$4 = upper_bits[b11:b8]^lower_bits[b4:p4]
 RXOR $1 $4 //$1 = ^(upper_bits[b11:b8]^lower_bits[b4:p4]) or !p4err
 ADD $6 $1 //$6 = {111111, !p8err, !p4err} ///jl ending here
 LSH $6 #1 //$6 << 1 
 /*p2*/
 MOV $4 $0 //$4 = 0
 ADDI $4 #3 //$4 = ‘b11
 LSH $4 #2 //$4 = ‘b1100
 MOV $1 $4 //$1 = ‘b1100
 MOV $2 $4 //$2 = ‘b1100
 LSH $4 #4 //$4 = ‘b11000000
 ADD $4 $1 //$4 = ‘b11001100
 MOV $1 $4 //$1 = $4 ///jl starting here
 AND $1 $5 //$1 = ‘b11001100 & upper_bits or upper_bits[b11:b10, b7:b6]
 AND $4 $7 //$4 = ‘b11001100 & lower_bits or lower_bits[b4:b3, b1:p2]
 BXOR $4 $1 //$4 = upper_bits[b11:b10, b7:b6]^lower_bits[b4:b3, b1:p2]
 RXOR $1 $4 //$1 = ^(upper_bits[b11:b10, b7:b6]^lower_bits[b4:b3, b1:p2]) or !p2err
 ADD $6 $1 //$6 = {11111, !p8err, !p4err, !p2err} ///jl ending here
 LSH $6 #1 //$6 << 1 
 /*p1*/
 MOV $4 $2 //$4 = $2 or ‘b1100 ///if necessary can free up $2 with a couple extra instructions
 SUBI $4 #2 //$4 = ‘b1010
 MOV $1 $4 //$1 = $4
 LSH $4 #4 //$4 = ‘b10100000
 ADD $4 $1 //$4 = ‘b10101010
 MOV $1 $4 //$1 = $4 ///jl starting here
 AND $1 $5 //$1 = ‘b10101010 & upper_bits or upper_bits[b11, b9, b7, b5]
 AND $4 $7 //$4 = ‘b10101010 & lower_bits or lower_bits[b4, b2, b1, p1]
 BXOR $4 $1 //$4 = upper_bits[b11, b9, b7, b5]^lower_bits[b4, b2, b1, p1]
 RXOR $1 $4 //$1 = ^(upper_bits[b11, b9, b7, b5]^lower_bits[b4, b2, b1, p1]) or !p1err
 ADD $6 $1 //$6 = {1111, !p8err, !p4err, !p2err, !p1err} ///jl ending here
 NOT $6  //$6 = {p8err, p4err, p2err, p1err}


 /*Error Cases*/
//calculate FINAL address and store in $2
//set whatever the error register ($1) will be to 0
 MOV $1 $0 //$1 = 0
 EQ $0 $6  //if no errors, skip next instruction 
 JAL $0 ERROR2 //go to error calculations
 JAL $0 FINAL //if no errors, skip to storing result (maybe calculate and hold address in $2?)
 ERROR2:
 RXOR $1 $5 //$1 = ^lower_bits
 RXOR $4 $7 //$4 = ^upper_bits
 BXOR $4 $1 //$4 = ^(upper_bits, lower_bits) or !p0err
 MOV $1 $4 //$1 = ^(upper_bits, lower_bits) or !p0err
 MOV $4 $0 //$4 = 0
 SUBI $4 #2 //$4 = ‘b11111110
 ADD $4 $1 //$4 = {1111111, !p0err}
 NOT $4  //$4 = !$4 or p0err
 ADDI $1 #1 //$1 = {0000000,!p0err}+1
//set whatever the error register will be to 2 ($1 is set to 2 previously)
 EQ $0 $4 //if two errors, skip next instruction
 JAL $0 ERROR1 //if one error, begin to find and fix error
 JAL $0 FINAL //if two errors, skip to storing result
 ERROR1:
 AND $4 $6 //$4 = p1err
 EQ $4 $0
 LSH $1 #1 //if p1err, m << 1
 MOV $4 $0 //$4 = 0
 ADDI $4 #2 //$4 = b’00000010
 AND $4 $6 //$4 = p2err
 EQ $4 $0
 LSH $1 #2 //if p2err, m << 2
 MOV $4 $0 //$4 = 0
 ADDI $4 #4 //$4 = b’00000100
 AND $4 $6 //$4 = p4err
 EQ $4 $0
 LSH $1 #4 //if p4err, m << 4
 MOV $4 $1 //$4 = m
 


 MOV $1 $6 //$1 = {p8err, p4err, p2err, p1err} 
 RSH $1 #3 //$1 = p8err
 /*Calculate j+30*/
 AND $2 $0 //$2 = 0   or x = 0
 ADDI $2 #4 //$2 += 4   or x = 4 
 LSH $2 #4 //$2 *= 4   or x = 32
 SUBI $2 #2 //$2 -= 2   or x = 30
 ADD $2 $3 //$2 = j + 30
 ADD $2 $1 //$2 = j + 30 + p8err
 LOAD $2 #0 //if p8err, $1 = upper_bits; else $1 = lower_bits
 
 /*Flip Error*/ 
 BXOR $4 $1 //$4 = fixed upper_bits or lower_bits
 RSH $6 #3 //$6 = p8err
 
 MOV $1 $0
 ADDI $1 #1 //$1 = 1 


 EQ $6 $0 //if p8err, skip next instruction
 MOV $7 $4 //$7 = fixed lower_bits
 EQ $6 $1 //
 MOV $5 $4 //$5 = fixed upper_bits
 
FINAL: 
 LSH $1 #4 
 LSH $1 #2 //$1 = {F2,F1,000000}
 MOV $2 $0
 ADDI $2 #4
 ADDI $2 #3 //$2 = b’00000111
 MOV $4 $2 //$4 = b’00000111
 LSH $2 #4
 LSH $2 #1
 AND $2 $5 //$2 = {upper_bits[b11:b9],00000}
 RSH $2 #4
 RSH $2 #1 //$2 = {00000, upper_bits[b11:b9]}
 ADD $2 $1 //$2 = {F2, F1, 000, upper_bits[b11:b9]}
 MOV $1 $2 //$1 = {F2, F1, 000, upper_bits[b11:b9]}
 STORE $3 #1 //data_mem[j+1] = {F2, F1, 000, upper_bits[b11:b9]}
 LSH $4 #2
 ADDI $4 #2 //$4 = b’00011110
 AND $5 $4 //$5 = {000,upper_bits[b8:b5], 0}
 LSH $5 #3 //$5 = {upper_bits[b8:b5], 0000
 SUBI $4 #2
 LSH $4 #3 //$4 = b’11100000
 AND $4 $7 //$4 = {lower_bits[b4:b2],00000}
 RSH $4 #4
 ADD $4 $5 //$4 = {upper_bits_[b8:b5], lower_bits[b4:b2],0}
 MOV $6 $0
 ADDI $6 #1 //$6 = 1
 LSH $6 #3 //$6 = ‘b00001000
 AND $7 $6 //$7 = {0000, lower_bits[b1], 000}
 RSH $7 #3 //$7 = {0000000, lower_bits[b1}
 ADD $4 $7 //$4 = {b8:b5, b4:b2, b1}
 MOV $1 $4 //$1 = {b8:b5, b4:b2, b1}
 STORE $3 #0 //data_mem[j] = {b8:b5, b4:b2, b1}
 
 AND $4 $0 //$4 = 0   or x = 0
 ADDI $4 #4 //$4 += 4   or x = 4 
 LSH $4 #4 //$4 *= 4   or x = 32
 SUBI $4 #4 //$4 -= 2   or x = 28
//calc DONE
 
 EQ $4 $3 DONE
 JAL $0 INCRJ
 JAL $0 DONE 


 INCRJ:
 MOV $2 $0
 ADDI $2 #2
 ADD $2 $3
 MOV $2 $3
 JAL $0 BEGIN
 
DONE:
//the jump link stuff for finding the error flags could go somewhere down here too 
